name: Full CI-CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [reopened, synchronize, opened]

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create server .env file
        run: |
          cat > ./server/.env << EOF
          PORT=3000
          MONGO_URI=${{ secrets.MONGO_URI }}
          MAP_API=${{ secrets.MAP_API }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRE=${{ secrets.JWT_EXPIRE }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          EOF

      - name: Install server dependencies
        run: npm ci
        working-directory: ./server

      - name: Run server tests with coverage
        run: npm run test:ci
        working-directory: ./server

      - name: Verify server coverage file
        run: |
          ls -la coverage/
          [ -f coverage/lcov.info ] || exit 1
          echo "Server coverage file exists with $(wc -l < coverage/lcov.info) lines"
        working-directory: ./server

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-client:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./client

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          vercel deploy --prod \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --build-env NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --yes \
            --name turfmania

  deploy-admin:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./admin

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'admin/package-lock.json'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          vercel deploy --prod \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --build-env NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --yes \
            --name turfmania-admin

  deploy-organization:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./organization

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'organization/package-lock.json'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          vercel deploy --prod \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --build-env NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --yes \
            --name turfmania-organization
